# .github/workflows/docker-ci.yml

name: Docker CI

on:
  push:
    branches: ["main", "master"]
  workflow_dispatch:

env:
  # Domain only for login; owner/repo are used in tags.
  REGISTRY: ghcr.io
  IMAGE_NAMESPACE: ${{ toLower(github.repository_owner) }}
  IMAGE_NAME: factors

permissions:
  contents: read
  packages: write

jobs:
  build-and-push-cpu:
    name: Build & push CPU image
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up QEMU (optional multi-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: "Debug: print CPU image tags"
        run: |
          echo "REGISTRY=${REGISTRY}"
          echo "IMAGE_NAMESPACE=${IMAGE_NAMESPACE}"
          echo "IMAGE_NAME=${IMAGE_NAME}"
          echo "CPU_TAG=${REGISTRY}/${IMAGE_NAMESPACE}/${IMAGE_NAME}:cpu-${GITHUB_SHA}"
          echo "CPU_LATEST=${REGISTRY}/${IMAGE_NAMESPACE}/${IMAGE_NAME}:cpu-latest"

      - name: Build and push CPU image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile.cpu
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}/${{ env.IMAGE_NAME }}:cpu-${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}/${{ env.IMAGE_NAME }}:cpu-latest
          build-args: |
            PYTHON_VERSION=3.11

      - name: Smoke test CPU image (run entrypoint help)
        run: |
          IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}/${{ env.IMAGE_NAME }}:cpu-${{ github.sha }}
          docker run --rm --entrypoint /usr/local/bin/factors-entrypoint.sh ${IMAGE} help || true

      - name: Create outputs json
        run: |
          echo "{\"cpu_image\":\"${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}/${{ env.IMAGE_NAME }}:cpu-${{ github.sha }}\"}" > docker_images.json

      - name: Upload Docker build metadata
        uses: actions/upload-artifact@v4
        with:
          name: docker-images-${{ github.sha }}
          path: docker_images.json

  build-and-push-gpu:
    name: Build & push GPU image
    runs-on: ubuntu-latest
    needs: build-and-push-cpu
    timeout-minutes: 90

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up QEMU (optional multi-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: "Debug: print GPU image tags"
        run: |
          echo "REGISTRY=${REGISTRY}"
          echo "IMAGE_NAMESPACE=${IMAGE_NAMESPACE}"
          echo "IMAGE_NAME=${IMAGE_NAME}"
          echo "GPU_TAG=${REGISTRY}/${IMAGE_NAMESPACE}/${IMAGE_NAME}:gpu-${GITHUB_SHA}"
          echo "GPU_LATEST=${REGISTRY}/${IMAGE_NAMESPACE}/${IMAGE_NAME}:gpu-latest"

      - name: Build and push GPU image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile.gpu
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}/${{ env.IMAGE_NAME }}:gpu-${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}/${{ env.IMAGE_NAME }}:gpu-latest
          build-args: |
            UBUNTU_VERSION=22.04

      - name: Upload GPU build metadata
        uses: actions/upload-artifact@v4
        with:
          name: docker-images-gpu-${{ github.sha }}
          path: docker_images.json
